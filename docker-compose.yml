services:
  #---------------------
  # Auth Service
  #---------------------
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "9000:9000"
    env_file:
      - ./auth-service/.env
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - backend
  #------------------
  # Blog Service
  #------------------
  blog-service:
    build:
      context: ./blog-service
      dockerfile: Dockerfile
    container_name: blog-service
    ports:
      - "9001:9001"
    env_file:
      - ./blog-service/.env
    depends_on:
      blog-db:
        condition: service_healthy
    networks:
      - backend
  #-----------------
  # API Gateway
  #-----------------
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - ./api-gateway/.env
    depends_on:
      - auth-service
      - blog-service
    networks:
      - backend
  #----------------------
  # Notification Service
  #----------------------
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "9002:9002"
    env_file:
      - ./notification-service/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - backend
  #----------------------------
  # Kafka (async communication)
  #----------------------------
  kafka:
    image: apache/kafka
    restart: always
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    ports:
      - "9092:9092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Increased start period
    networks:
      - backend
    #-----------------------
    # PostgreSQL For Auth DB
    #-----------------------
  auth-db:
    image: postgres:16.9
    container_name: auth_db
    restart: always
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    networks:
      - backend
    #-----------------------------
    # PostgreSQL For Blog DB
    #-----------------------------
  blog-db:
    image: postgres:16.9
    container_name: blog_db
    restart: always
    environment:
      POSTGRES_USER: blog_user
      POSTGRES_PASSWORD: blog_password
      POSTGRES_DB: blog_db
    ports:
      - "25432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_user -d blog_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - blog_pgdata:/var/lib/postgresql/data
    networks:
      - backend

volumes:
  auth_pgdata:
  blog_pgdata:

networks:
  backend:
    driver: bridge
